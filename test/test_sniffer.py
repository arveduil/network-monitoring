import unittest

from packet_sniffer import ethernet_frame, EthernetProtocol, get_connection

# Example github.com http request frame
TEST_FRAME = b'\x8cY\xc3n\xe9\xcd\x00Oj\x01\xf6\xaf\x08\x00E\x00\x01\xb94h@\x00@\x06D\xa4\xc0\xa8\x01\x1e\x8cRr\x1a' \
             b'\xb6\x00\x01\xbb\x1a-Bq\xed\x8f\x93\x87\x80\x18\x01\xf5\xaa\x01\x00\x00\x01\x01\x08\n]L\xd2\xabT\xd5' \
             b'\xdaS\x17\x03\x03\x01\x80"\xdaQ\x88r\xf60\xd9yys^\x87m\xe7\xcfg\xb7\xdbJ\xbb\x7f\x9c\xaf\x84=c\xe3' \
             b'<\xd0\xef\xf8!\x08c%4\xecgit\x9c\xd8\'\xb8wf\xf0\xa8S\xa5\xe9\xc9\xd9\xe4\xd8\xd4Q\x1b\x1f\x0f\xb2sG' \
             b'\xf4x\xb0\xf1\xca\x85\xaf^\x0e\xd7\xe5c\x86\x13\xade\xea\rIU\xc3\x8d\xb3\xf7J)X\xce\x9ad\x8c\xf6\xe4' \
             b'\xfe\x1f\xb7m\xf4\xdcj~\xc9/}>\xce\xb5\x92\x12:\xbc\x82$C\xc4\xe7i\xfd\x87`\xcc\xed\x86\xab"7\xf4' \
             b'&:\xa5F\x06E\xb9\x95,@\x9c\x98\x8b\x850\xba\xea\x9eQ\xf1\x17\x8d\x05\xd9\xbb\xb7\xa1Ns\x8b\xa0\x9b\xa6' \
             b'\x02\xa9\x867X\x1e\xd2\x7f.O7F,' \
             b's[+\x00N\xec|-)t\x97\xac\xech\xef\x88U\x9d@\xb2g\x7f^\xc3\xa4\xb8\x91\xb1\xaa\x96\xd9\xd7S`\xd31\x83y' \
             b'\xc4Lb+x\xc6\xca4\x8c\x92\x1a\x98\x19s^\x1cA\x19E\x11\x06\xf4\x195\x97\xb0\xc9|3\xcb_\xadF\xcf-\xfb' \
             b'\xea^m\xe6.\x94\xd63\x8e\xfb\xb5\xfa\xc4\x90\x1c\n\xdfD\xfc`\xb4\x01\x0f9j\xb5r\xedxj\x80w93\xb5\xc7' \
             b'>\xdb\xe3pp\xe9\x10=1\x98U\xdd{G\xf5\x94w\xb3\xcax\xd5\x19b\xbe\xb8;\'\x0c\xa6!\xc1w\xb6\xc4\xa9\xd0' \
             b'\xb5\xfa\xcd\x98\xb1\xedl|\\w3\xc6S[' \
             b'\xaa\xce\\\x08\x0c\xde\xc9\x96\xc2\x10r\x01\xabM8.\xf3E\x88\x0f\xc42\xabQ\xf9`\r\xb6\xec\xd0>\xf9`\x05' \
             b'\x0bq\xb5P\xd4\x83\xf1\xf4\xc5Ji\xca\xb2 '

DEST_MAC = b'8c59c36ee9cd'
SRC_MAC = b'004f6a01f6af'


class SnifferTestCase(unittest.TestCase):
    def test_parsing_eth_frame(self):
        dst_mac, src_mac, proto, payload = ethernet_frame(TEST_FRAME)
        self.assertEqual(proto, EthernetProtocol.IPV4)
        self.assertEqual(payload, TEST_FRAME[14:])
        self.assertEqual(dst_mac, DEST_MAC)
        self.assertEqual(src_mac, SRC_MAC)

    def test_parsing_src_dest(self):
        src, dest = get_connection(TEST_FRAME)
        self.assertEqual(src, '8.0.69.0')
        self.assertEqual(dest, '1.185.52.104')


if __name__ == '__main__':
    unittest.main()
